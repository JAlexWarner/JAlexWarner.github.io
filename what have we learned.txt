// var spanWidth = document.querySelector('#text span').width();
// document.querySelector('#text').animate( { width: spanWidth }, 6000 );

We don't need JQuery or even Javascript to make the link text grow when then the navigation bar is hovered

function build_text(textElement: Element) {
    const full_word = textElement.textContent;
    
    if (full_word == null) {
      throw Error("word is null")
    }
    else {
      textElement.textContent = "";
      for (var i=0; i< full_word.length; i++) {
      textElement.textContent = textElement.textContent + full_word[0]
      }
}
}

We especially don't need Event Listeners when something is simple.
Maybe we'll find a use for it somewhere else. Perhaps when we do the card sliders?

document.querySelectorAll(".growing-text").forEach(item => {
  item.addEventListener("mouseover", function(){
    build_text(item)
  })
})

const textAddEvent = new Event("textAdd", {
  bubbles: false,
  cancelable: true,
  composed: false
})

var nav_bar_element = document.querySelector(".nav-bar");

let link_text_array = Array.from(document.querySelectorAll("link-text"));
// let link_text_lengths = link_text_array.map(x => x.textContent? x.textContent.length : 0);

What we wanted to do above was grow the link text letter by letter.
This looked pretty bad, so we then did an EventListener approach.
I found a Jquery implementation, but I wanted to keep things to simple 
JavaScript at the most when CSS didn't cut it.
The JQuery approach just boiled down to making the width change over a time interval.
I first realized JQuery is just Javascript when you want to save on 2 lines of code. /s
Then I realized, it was just a transition on width for people who didn't understand CSS fully.
So, I did a transition on the width of the link texts instead. It was beautiful.
From JQuery -> JS Event Listeners -> 2 lines of CSS. It only took 3 hours.

Let's leave a 1px or 5px border when we're testing something that affects dimensions

Removing the scrollbar has been quite a pain in the bum.
Will need to check on different browsers, but finding an up-to-date solution for Firefox is troublesome.
https://stackoverflow.com/questions/20997183/how-to-hide-scrollbar-in-firefox

A few bugs came from divs inheriting properties from parent elements.

Look into cleaning up CSS Files and how best to separate them.
I badly want to separate the media queries into their own files but 
I'm not sure if that's a best practice. For now, I'll just have
arrangement.css open on both sides.

Oddly, I default my front-end thinking to Event Listeners. 
Interestingly, though, I always find a way to do something simpler.
Whenever I find Javascript implementations for complex things, I feel like
90% of the time, there's a much better CSS solution. This leads to less
Javascript bloat, but the CSS files are getting unwiedly.